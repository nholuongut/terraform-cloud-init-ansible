#!/bin/bash
#:vi set ft=sh :

ENV=${ENV}
ORG=${ORG}
HOSTGROUP=${HOSTGROUP}
ANSIBLE_PLAYBOOKS_REPO=${ANSIBLE_PLAYBOOKS_REPO}

set -o errexit -o errtrace -o pipefail
trap signal_and_exit ERR

function my_instance_id
{
  curl -sL http://169.254.169.254/latest/meta-data/instance-id/
}

function my_az
{
  curl -sL http://169.254.169.254/latest/meta-data/placement/availability-zone/
}

function my_aws_region
{
  local az
  az=$$(my_az)
  echo "$${az%?}"
}

# Signaling that this instance is unhealthy allows AWS auto scaling to launch a copy 
# Provides for self healing and helps mitigate transient failures (e.g. package transfers)
function signal_and_exit
{
  status=$$?
  if [ $$status -gt 0 ]; then
    sleep 180 # give me a few minutes to look around before croaking
    aws autoscaling set-instance-health \
      --instance-id "$$(my_instance_id)" \
      --health-status Unhealthy \
      --region "$$(my_aws_region)"
  fi
}

#-----^ AWS safety guards ^-----

yum -y install epel-release
yum -y install unzip git python2-pip python-setuptools ansible
pip install awscli boto3

if [ ! -d /root/.ssh ]; then
  mkdir /root/.ssh
  chown root:root /root/.ssh
  chmod go-rwx /root/.ssh
fi

aws ssm get-parameter --region $(my_aws_region) --name /ansible/common/git/private_key \
 --with-decryption --query 'Parameter.Value' --output text > /root/.ssh/ansible_rsa

chmod go-rwx /root/.ssh/ansible_rsa

# Work around ancient version of git, shake fist at Red Hat
cat > /root/.ssh/config <<EOF
Host *
  StrictHostKeyChecking no
  IdentityFile /root/.ssh/ansible_rsa
EOF

git clone $${ANSIBLE_PLAYBOOKS_REPO} /etc/ansible-local
 
cd /etc/ansible-local
cat > seed.txt <<EOF
${ANSIBLE_SEED_VARS}
EOF

ansible-galaxy install -f -r requirements.yml -p roles && rm -f /root/.ssh/config

env `cat /etc/ansible-local/seed.txt` ANSIBLE_CONFIG=/etc/ansible-local/ansible.cfg \
 HOSTGROUP=$${HOSTGROUP} ENV=$${ENV} ansible-playbook /etc/ansible-local/site.yml -c local
